import json, connect, config, os, getPayLink, game
from connect import bot, db, logging, form_text_markdownv2
from telebot import types
from managment_user import referal, add_token, del_user, UserList, data_user, edit_mes_users_list
                  
manager_users_list = UserList()


def successfully_paid(id, datetime_exit):
    cur = db.cursor()
    cur.execute("SELECT link_server, paid FROM users_subscription WHERE t_id=" + str(id))
    data_cur = cur.fetchone()
    link_server = data_cur[0]
    paid = data_cur[1]
    keyboard = types.InlineKeyboardMarkup()
    #keyboard.add(types.InlineKeyboardButton(text="–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data='{"key": "faq_video"}'))
    keyboard.add(types.InlineKeyboardButton(text="–ê–≤—Ç–æ –≤–∫–ª/–æ—Ç–∫–ª —Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º", callback_data='{"key": "comands_video"}'))
    keyboard.add(types.InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è VPN —Å –¥–æ–º–∞—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞", callback_data='{"key": "home_key_faq"}'))
    keyboard.add(types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data='{"key": "sale"}'))
    if paid != None:
        keyboard_ref = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_ref.add(types.KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"))
        bot.send_message(id, "–û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —ç—Ç–æ 1 –º–µ—Å. –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard_ref)
    bot.send_photo(id, open(config.FILE_URL + "vpn_on.jpg", "rb"),"*–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å\.*\n\n –í–∞—à VPN –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\. –î–ª—è –¥–æ—Å—Ç—É–ø—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã \(—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é\), –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\-–∫–ª—é—á –∏ –Ω–∞–∂–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\.\n\n–°—Å—ã–ª–∫–∞\-–∫–ª—é—á: \n`" + form_text_markdownv2(link_server) + "`\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –µ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\.\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + form_text_markdownv2(str(datetime_exit)) + 
                   "\n\n–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n[üì± iOS\(iPhone\)](https://apps.apple.com/ru/app/outline-app/id1356177741) \| [üì± Android](https://play.google.com/store/apps/details?id=org.outline.android.client) \| [üíª MacOS](https://apps.apple.com/us/app/outline-secure-internet-access/id1356178125?mt=12) \| [üíª Windows](https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe) \| [üíª Linux](https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage)" +
                   "\n\n–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\. –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ –≤–∫–ª –æ—Ç–∫–ª —Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º:\n[üì± iOS\(iPhone\)](https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690)", reply_markup=keyboard, parse_mode="MarkdownV2")

def add_key_admin(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="/597730754"),
                 types.KeyboardButton(text="/action_users_count"),
                 types.KeyboardButton(text="/restart"))
    bot.send_message(message.from_user.id, "add_key", reply_markup=keyboard)
    manager_users_list.mes_arr = []
    manager_users_list.start = 0

@bot.message_handler(commands=["597730754"])
def d(message):
    if message.chat.id == config.ADMINCHAT:
        add_key_admin(message)
        manager_users_list.search_all_user(message)
    else:
        logging.error("–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")



@bot.message_handler(commands=["restart"])
def restart(message):
    if message.chat.id == config.ADMINCHAT:
        os.system("systemctl restart bot_vpn.service")
    else:
        bot.send_message(message.from_user.id, "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        logging.error("–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")



@bot.message_handler(commands=["–ø–æ–∏—Å–∫","–Ω–∞–π—Ç–∏", "search"])
def create_table(message):
    if message.chat.id == config.ADMINCHAT:
        add_key_admin(message)
        manager_users_list.search_user(message)
    else:
        logging.error("–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@bot.message_handler(commands=["action_users_count"])
def define(message):
    cur = db.cursor()
    cur.execute("SELECT COUNT(*) FROM users_subscription WHERE action=1")
    bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: " + str(cur.fetchone()[0]))


@bot.message_handler(commands=["spam"])
def all_mes(message):
    if message.chat.id == config.ADMINCHAT:
        cur = db.cursor()
        cur.execute("SELECT t_id FROM users_subscription")
        for i in cur.fetchall():
            try:
                bot.copy_message(chat_id=i[0], from_chat_id=message.reply_to_message.chat.id, message_id=message.reply_to_message.id, disable_notification=False)
            except Exception as e:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å spam —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", e)

@bot.message_handler(commands=["gg"])
def gg(message):
    connect.session[message.from_user.id] = game.Game(message)

@bot.message_handler(commands=["start"])
def start(message):
    cur = db.cursor()
    cur.execute("SELECT action FROM users_subscription WHERE t_id=" + str(message.from_user.id))
    status = cur.fetchone()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º " + str(status))
    keyboard = types.InlineKeyboardMarkup()
    if status == None:
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data='{"key": "try"}'))
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data='{"key": "pppd"}'))
        keyboard.add(types.InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data='{"key": "termsOfUse"}'))
        option_text = "\n\n_–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É \"–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å\", –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\._" 
    elif status[0] == 0:
        keyboard.add(
            types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data='{"key": "sale"}')
        )
        option_text = ""
    elif status[0] == 1:
        successfully_paid(message.from_user.id, "–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        return
    bot.send_message(message.chat.id, "*–í—ã–≥–æ–¥–Ω–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ VPN –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü\.*" + option_text, reply_markup=keyboard, parse_mode="MarkdownV2")

@bot.message_handler(commands=["status_bot"])
def oss(message):
    if message.chat.id == config.ADMINCHAT:
        bot.send_message(message.chat.id, str(os.system("systemctl status bot_vpn.service")))


@bot.message_handler(content_types=["text"])
def text_handler(message):
    if message.chat.id == config.ADMINCHAT:
        try:
            user_id = str(message.reply_to_message.text).split('id:', -1)[1]
            bot.copy_message(chat_id=config.ADMINCHAT, from_chat_id=user_id, message_id=message.id)
        except Exception:
            pass
        try:
            user_id = str(message.reply_to_message.caption).split('id:', -1)[1]
            bot.copy_message(chat_id=config.ADMINCHAT, from_chat_id=user_id, message_id=message.id)
        except Exception:
            pass
    if message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        referal(message)
    if message.text == "test":
        getPayLink.getOrderList()
    else:
        bot.send_message(config.ADMINCHAT,
                         "[" + str(message.from_user.first_name) +
                         " " + str((message.from_user.last_name or "")) +
                         "](tg://user?id\=" + str(message.from_user.id) +
                         "):\n" +
                         connect.form_text_markdownv2(message.text) +
                         "\nid:" + str(message.from_user.id), parse_mode="MarkdownV2")
    logging.info(message.text)

@bot.message_handler(content_types=["photo"])
def photo_chek(message):
    bot.send_message(chat_id=message.from_user.id, reply_to_message_id=message.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –æ–∂–∏–¥–∞–π—Ç–µ...")
    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton(text="–°–®–ê", callback_data='{"key": "connectUSA", "id": "' + str(message.from_user.id) + '"}'),
            types.InlineKeyboardButton(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", callback_data='{"key": "connectNID", "id": "' + str(message.from_user.id) + '"}'))
    
    bot.send_photo(config.ADMINCHAT, photo=message.photo[0].file_id, caption="user: [" + form_text_markdownv2(message.from_user.first_name) + " " + str(form_text_markdownv2(message.from_user.last_name) or "") + "](tg://user?id\=" + str(message.from_user.id) + ") \n\nid: " + str(message.from_user.id), reply_markup=key, parse_mode="MarkdownV2")

@bot.message_handler(content_types=["document"])
def file_chek(message):
    bot.send_message(chat_id=message.from_user.id, reply_to_message_id=message.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –æ–∂–∏–¥–∞–π—Ç–µ...")
    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton(text="–°–®–ê", callback_data='{"key": "connectUSA", "id": "' + str(message.from_user.id) + '"}'),
            types.InlineKeyboardButton(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", callback_data='{"key": "connectNID", "id": "' + str(message.from_user.id) + '"}'))
    
    bot.send_document(config.ADMINCHAT, document=message.document.file_id, caption="user: [" + form_text_markdownv2(message.from_user.first_name) + " " + str(form_text_markdownv2(message.from_user.last_name) or "") + "](tg://user?id\=" + str(message.from_user.id) + ")\n\nid: " + str(message.from_user.id), reply_markup=key, parse_mode="MarkdownV2")


@bot.callback_query_handler(func=lambda call: True)
def callback_woker(call):
    call_data_json = call.data
    call_data = json.loads(call_data_json)
    username = str(call.from_user.first_name) + " " + str((call.from_user.last_name or ""))
    logging.info("chat: " + str(call.message.chat.title) + ", user:" + str(username) + " –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–ª—é—á–µ–º " + call_data['key'])

    if call_data['key'] == "try":
        bot.delete_message(call.message.chat.id, call.message.id)
        datetime_exit = add_token(call.from_user.id, time=config.FIRST_START_DURATION, name_user=username)
        successfully_paid(call.from_user.id, datetime_exit)
    elif call_data['key'] == "sale":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(text = "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
                                       callback_data='{"key": "sale_NED"}'),
            types.InlineKeyboardButton(text = "–°–®–ê",
                                       callback_data='{"key": "sale_USA"}')
        )
        bot.send_photo(call.from_user.id,
                       photo = open(config.FILE_URL + "num_login.png", "rb"),
                       caption = config.TEXTPAY
        )
    elif call_data['key'] == "sale_USA":
        connect.session[call.from_user.id] = getPayLink.WalletPay(call.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        url_pay = connect.session[call.from_user.id].getPayLink()
        keyboard.add(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü", url=url_pay))
        bot.send_message(call.from_user.id, config.TEXTPAYUSAMARKDOWNV2, parse_mode="MarkdownV2" ,reply_markup=keyboard)
    elif call_data['key'] == "connectUSA":
        key = types.InlineKeyboardMarkup()
        key.add(*[types.InlineKeyboardButton(text=i, callback_data='{"key": "action", "id": "' + str(call_data['id']) + '", "month": "' + str(i) + '"}') for i in range(1,13)], types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='{"key": "backConnectKey", "id": "' + str(call_data['id']) + '"}'))
        bot.edit_message_caption(chat_id = call.message.chat.id, message_id = call.message.id, caption = call.message.caption, reply_markup = key)
    
    elif call_data['key'] == "connectNID":

        key = types.InlineKeyboardMarkup()
        key.add(*[types.InlineKeyboardButton(text=i, callback_data='{"key": "action", "id": "' + str(call_data['id']) + '", "month": "' + str(i) + '", "server": "nid"}') for i in range(1,13)], types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='{"key": "backConnectKey", "id": "' + str(call_data['id']) + '"}'))
        bot.edit_message_caption(chat_id = call.message.chat.id, message_id = call.message.id, caption = call.message.caption, reply_markup = key)
    
    elif call_data['key'] == "backConnectKey":

        key = types.InlineKeyboardMarkup()
        key.add(types.InlineKeyboardButton(text="–°–®–ê", callback_data='{"key": "connectUSA", "id": "' + str(call_data['id']) + '"}'),
                types.InlineKeyboardButton(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", callback_data='{"key": "connectNID", "id": "' + str(call_data['id']) + '"}'))
                
        bot.edit_message_caption(chat_id = call.message.chat.id, message_id = call.message.id, caption = call.message.caption, reply_markup = key)

    elif call_data['key'] == "action":
        niderland = None
        if call.message.chat.id == config.ADMINCHAT:
            try:
                username = str(call.message.caption).split(": ", 1)[1]
            except Exception:
                username = str(call.message.text).split(" ", -2)[0]
        if call_data['server']:
            if call_data['server'] == "nid":
                niderland = True
        datetime_exit = add_token(call_data['id'], month=call_data["month"], name_user=username, niderland=niderland)
        successfully_paid(call_data['id'], datetime_exit)
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
        manager_users_list.search_user(call.message)
    elif call_data['key'] == "action_button":
        edit_mes_users_list(call.message, call_data["id"])
    elif call_data['key'] == "deaction":
        del_user(call_data['id'])
        manager_users_list.manager_users_list(call.message)
    elif call_data['key'] == "not_action":
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call_data['id'], "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    elif call_data['key'] == "faq_video":
        bot.send_video(call.from_user.id, open("/root/bot_vpn/fff.mov", "rb"), width=888, height=1920)
    elif call_data['key'] == "comands_video":
        bot.send_video(call.from_user.id, open("/root/bot_vpn/comands.MP4", "rb"), width=888, height=1920)
    elif call_data['key'] == "page_client_next":
        manager_users_list.start=int(manager_users_list.start) + 6
        manager_users_list.search_all_user(call.message)
    elif call_data['key'] == "page_client_back":
        manager_users_list.start-=6
        manager_users_list.search_all_user(call.message)
    elif call_data['key'] == "home_key_faq":
        bot.send_video(call.from_user.id, open("/root/bot_vpn/faq_key_on_off.MP4", "rb"), width=888, height=1920)
        #bot.send_message(call.from_user.id, config.URL_KEY_COMMAND)
    elif call_data['key'] == "data_user":
        data_user(call_data['id'])
    elif call_data['key'] == "option_where":
        if manager_users_list.one_active == 0:
            manager_users_list.one_active = 1
        else:
            manager_users_list.one_active = 0
        manager_users_list.start = 0
        manager_users_list.search_all_user(call.message)
    elif call_data['key'] == "start_game_zero":
        if int(call_data["id"]) == call.from_user.id:
            bot.answer_callback_query(callback_query_id=call.id, text='–¢—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ')
            return
        connect.session[int(call_data["id"])].users.append(call.from_user.id)
        connect.session[int(call_data["id"])].game_zero(call)
    elif call_data['key'] == "gz":
        connect.session[int(call_data["id"])].game_zero(call, call_data = call_data)
    elif call_data['key'] == "pppd":
        bot.send_message(call.message.chat.id, """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞—à Telegram –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥, —Ç–∞–∫—É—é –∫–∞–∫ id –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –Ω–∞—à–∏—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏. –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥, –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å–∞–º, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ú—ã –Ω–µ —Ä–∞–∑–≥–ª–∞—à–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ—Ä—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∏ —Ç–∞–∫–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à—É –ø–æ–ª–∏—Ç–∏–∫—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
–°–æ–≥–ª–∞—Å–∏–µ. –ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à –±–æ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.""")
    elif call_data['key'] == "termsOfUse":
        bot.send_message(call.message.chat.id, """–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –í–ü–ù (Virtual Private Network) - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∑–∞—â–∏—Ç—ã –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
–î–∞–ª–µ–µ –ø–æ —Ç–µ–∫—Å—Ç—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–º–∏–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –í—ã–≥–æ–¥–Ω—ã–π –í–ü–ù - –¥–∞–Ω–Ω—ã–π –≤–ø–Ω —Å–µ—Ä–≤–∏—Å.

–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

- –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –≤–ø–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏, —Å–∫–∞—á–∫–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è torrent - —Ñ–∞–π–ª–æ–≤.

- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –≤–ø–Ω —Å–µ—Ä–≤–∏—Å–∞.

- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –≤–ø–Ω —Å–µ—Ä–≤–∏—Å–∞.

- –í —Å–ª—É—á–∞–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ —Å–µ—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Å–±–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ outline –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥, –∞ —Ç–∞–∫–∂–µ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ª—É–≥ (–¥–∞–Ω–Ω—ã–π –≤–ø–Ω —Å–µ—Ä–≤–∏—Å) –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ª–µ–¥—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –≤–ø–Ω —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–æ–π.""")

    else:
        bot.answer_callback_query(callback_query_id=call.id, text='–ö–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.')

bot.infinity_polling()
